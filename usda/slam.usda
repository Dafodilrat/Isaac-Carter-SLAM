#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (-7.4001650849889495, -3.580289383513113, 2.667980001586285)
                double3 target = (-22.882753882084756, 27.041534142859454, -0.1276764454980377)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./slam.usda"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
        }
    }
    defaultPrim = "World"
    endTimeCode = 1000000
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)

def Xform "World"
{
    def Xform "full_warehouse" (
        customData = {
            dictionary omni = {
                dictionary kit = {
                    bool locked = 1
                }
            }
        }
        prepend references = @https://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.5/Isaac/Environments/Simple_Warehouse/full_warehouse.usd@
    )
    {
        rel proxyPrim (
            customData = {
                dictionary omni = {
                    dictionary kit = {
                        bool locked = 1
                    }
                }
            }
        )
        uniform token purpose (
            customData = {
                dictionary omni = {
                    dictionary kit = {
                        bool locked = 1
                    }
                }
            }
        )
        token visibility (
            customData = {
                dictionary omni = {
                    dictionary kit = {
                        bool locked = 1
                    }
                }
            }
        )
        double3 xformOp:rotateXYZ (
            customData = {
                dictionary omni = {
                    dictionary kit = {
                        bool locked = 1
                    }
                }
            }
        )
        double3 xformOp:scale (
            customData = {
                dictionary omni = {
                    dictionary kit = {
                        bool locked = 1
                    }
                }
            }
        )
        double3 xformOp:translate (
            customData = {
                dictionary omni = {
                    dictionary kit = {
                        bool locked = 1
                    }
                }
            }
        )
        uniform token[] xformOpOrder (
            customData = {
                dictionary omni = {
                    dictionary kit = {
                        bool locked = 1
                    }
                }
            }
        )
    }

    def Xform "carter_v1" (
        delete apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
        prepend apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
        prepend references = @https://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.5/Isaac/Robots/Carter/carter_v1.usd@
    )
    {
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-8.856132507324219, 0, 1.8062578439712524)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "chassis_link" (
            delete apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI"]
        )
        {
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            quatf xformOp:orient = (0.9999977, -3.408666e-7, 0.0021561903, -4.1827877e-7)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0.0005930460856919118, 4.9674234814307036e-9, -0.010126256716409543)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "box" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI"]
            )
            {
                bool physics:collisionEnabled = 1
            }

            over "chassis_obj"
            {
                over "carter_main" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token physics:approximation = "convexHull"
                    bool physics:collisionEnabled = 1
                }
            }
        }

        over "left_wheel_link"
        {
        }

        over "right_wheel_link"
        {
        }

        over "rear_pivot_link"
        {
        }

        over "rear_wheel_link"
        {
        }

        over "com_offset"
        {
        }

        over "imu"
        {
        }

        def Xform "Velodyne_VLS_128" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI"]
            prepend references = @https://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.5/Isaac/Sensors/Velodyne/vls-128/vls_128.usd@
        )
        {
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.6857264637947083, 0.6399999856948853, 0.6399999856948853)
            double3 xformOp:translate = (-0.05690209749343822, 0, 0.37821510576766587)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/carter_v1/chassis_link>
                rel physics:body1 = </World/carter_v1/Velodyne_VLS_128>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (-0.05916928, -3.1842583e-7, 0.3880898)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (0.9999977, 3.408666e-7, -0.0021561903, 4.1827877e-7)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        over "WheelMaterial"
        {
            float physics:dynamicFriction = 1.5
            float physics:staticFriction = 1.5
            uniform token physxMaterial:frictionCombineMode = "multiply"
        }
    }
}

def Xform "Environment"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float inputs:angle = 1
        float inputs:intensity = 3000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        quatd xformOp:orient = (0.6532814824381883, 0.2705980500730985, 0.27059805007309845, 0.6532814824381882)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

over "Render" (
    hide_in_stage_window = true
)
{
}

def "Graph"
{
    def OmniGraph "ROS_LidarRTX"
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 9)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "OnPlaybackTick"
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 2
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
        }

        def OmniGraphNode "RunOnce"
        {
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_LidarRTX/OnPlaybackTick.outputs:tick>
            token node:type = "isaacsim.core.nodes.OgnIsaacRunOneSimulationFrame"
            int node:typeVersion = 1
            custom uint outputs:step (
                customData = {
                    bool isExecution = 1
                }
            )
        }

        def OmniGraphNode "RenderProduct"
        {
            custom rel inputs:cameraPrim = </World/carter_v1/Velodyne_VLS_128/Velodyne_VLS_128> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom bool inputs:enabled
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_LidarRTX/RunOnce.outputs:step>
            custom uint inputs:height
            custom uint inputs:width
            token node:type = "isaacsim.core.nodes.IsaacCreateRenderProduct"
            int node:typeVersion = 2
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom token outputs:renderProductPath
        }

        def OmniGraphNode "Context"
        {
            custom uchar inputs:domain_id
            custom bool inputs:useDomainIDEnvVar
            token node:type = "isaacsim.ros2.bridge.ROS2Context"
            int node:typeVersion = 2
            custom uint64 outputs:context
        }

        def OmniGraphNode "LaserScanPublish"
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </Graph/ROS_LidarRTX/Context.outputs:context>
            custom bool inputs:enabled
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_LidarRTX/RenderProduct.outputs:execOut>
            custom string inputs:frameId = "chasis_link"
            custom uint inputs:frameSkipCount
            custom bool inputs:fullScan = 0
            custom string inputs:nodeNamespace = "/carter"
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom token inputs:renderProductPath
            prepend token inputs:renderProductPath.connect = </Graph/ROS_LidarRTX/RenderProduct.outputs:renderProductPath>
            custom bool inputs:resetSimulationTimeOnStop
            custom bool inputs:showDebugView
            custom string inputs:topicName = "/laser_scan"
            custom token inputs:type = "laser_scan" (
                allowedTokens = ["laser_scan", "point_cloud"]
            )
            custom bool inputs:useSystemTime
            token node:type = "isaacsim.ros2.bridge.ROS2RtxLidarHelper"
            int node:typeVersion = 1
        }
    }

    def OmniGraph "ROS_TF" (
        active = false
    )
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 9)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "OnPlaybackTick"
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 2
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
        }

        def OmniGraphNode "Context"
        {
            custom uchar inputs:domain_id
            custom bool inputs:useDomainIDEnvVar
            token node:type = "isaacsim.ros2.bridge.ROS2Context"
            int node:typeVersion = 2
            custom uint64 outputs:context
        }

        def OmniGraphNode "ReadSimTime"
        {
            custom bool inputs:resetOnStop = 0
            custom int64 inputs:swhFrameNumber
            token node:type = "isaacsim.core.nodes.IsaacReadSimulationTime"
            int node:typeVersion = 1
            custom double outputs:simulationTime
        }

        def OmniGraphNode "PublisherTF"
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </Graph/ROS_TF/Context.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_TF/OnPlaybackTick.outputs:tick>
            custom string inputs:nodeNamespace = "/carter"
            custom rel inputs:parentPrim = </World/full_warehouse> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom bool inputs:staticPublisher
            custom rel inputs:targetPrims = </World/carter_v1_physx_lidar> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </Graph/ROS_TF/ReadSimTime.outputs:simulationTime>
            custom string inputs:topicName = "/tf"
            token node:type = "isaacsim.ros2.bridge.ROS2PublishTransformTree"
            int node:typeVersion = 1
        }
    }

    def OmniGraph "ROS_Odometry"
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 9)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "OnPlaybackTick"
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 2
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
        }

        def OmniGraphNode "Context"
        {
            custom uchar inputs:domain_id
            custom bool inputs:useDomainIDEnvVar
            token node:type = "isaacsim.ros2.bridge.ROS2Context"
            int node:typeVersion = 2
            custom uint64 outputs:context
        }

        def OmniGraphNode "ReadSimTime"
        {
            custom bool inputs:resetOnStop = 0
            custom int64 inputs:swhFrameNumber
            token node:type = "isaacsim.core.nodes.IsaacReadSimulationTime"
            int node:typeVersion = 1
            custom double outputs:simulationTime
        }

        def OmniGraphNode "TFWorld2Odom"
        {
            custom string inputs:childFrameId = "odom"
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </Graph/ROS_Odometry/Context.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_Odometry/OnPlaybackTick.outputs:tick>
            custom string inputs:nodeNamespace = ""
            custom string inputs:parentFrameId = "world"
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom quatd inputs:rotation
            custom bool inputs:staticPublisher
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </Graph/ROS_Odometry/ReadSimTime.outputs:simulationTime>
            custom string inputs:topicName
            custom vector3d inputs:translation
            token node:type = "isaacsim.ros2.bridge.ROS2PublishRawTransformTree"
            int node:typeVersion = 1
        }

        def OmniGraphNode "TFOdom2Robot"
        {
            custom string inputs:childFrameId = "chasis_link"
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </Graph/ROS_Odometry/Context.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_Odometry/OnPlaybackTick.outputs:tick>
            custom string inputs:nodeNamespace = ""
            custom string inputs:parentFrameId
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom quatd inputs:rotation
            prepend quatd inputs:rotation.connect = </Graph/ROS_Odometry/ComputeOdometry.outputs:orientation>
            custom bool inputs:staticPublisher
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </Graph/ROS_Odometry/ReadSimTime.outputs:simulationTime>
            custom string inputs:topicName
            custom vector3d inputs:translation
            prepend vector3d inputs:translation.connect = </Graph/ROS_Odometry/ComputeOdometry.outputs:position>
            token node:type = "isaacsim.ros2.bridge.ROS2PublishRawTransformTree"
            int node:typeVersion = 1
        }

        def OmniGraphNode "ComputeOdometry"
        {
            custom rel inputs:chassisPrim = </World/carter_v1/chassis_link> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_Odometry/OnPlaybackTick.outputs:tick>
            token node:type = "isaacsim.core.nodes.IsaacComputeOdometry"
            int node:typeVersion = 1
            custom vector3d outputs:angularAcceleration
            custom vector3d outputs:angularVelocity
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom vector3d outputs:linearAcceleration
            custom vector3d outputs:linearVelocity
            custom quatd outputs:orientation
            custom vector3d outputs:position
        }

        def OmniGraphNode "PublisherOdometry"
        {
            custom vector3d inputs:angularVelocity
            prepend vector3d inputs:angularVelocity.connect = </Graph/ROS_Odometry/ComputeOdometry.outputs:angularVelocity>
            custom string inputs:chassisFrameId = "chassis_link"
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </Graph/ROS_Odometry/Context.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_Odometry/ComputeOdometry.outputs:execOut>
            custom vector3d inputs:linearVelocity
            prepend vector3d inputs:linearVelocity.connect = </Graph/ROS_Odometry/ComputeOdometry.outputs:linearVelocity>
            custom string inputs:nodeNamespace = ""
            custom string inputs:odomFrameId
            custom quatd inputs:orientation
            prepend quatd inputs:orientation.connect = </Graph/ROS_Odometry/ComputeOdometry.outputs:orientation>
            custom vector3d inputs:position
            prepend vector3d inputs:position.connect = </Graph/ROS_Odometry/ComputeOdometry.outputs:position>
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom vector3d inputs:robotFront
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </Graph/ROS_Odometry/ReadSimTime.outputs:simulationTime>
            custom string inputs:topicName = "/odom"
            token node:type = "isaacsim.ros2.bridge.ROS2PublishOdometry"
            int node:typeVersion = 1
        }

        def OmniGraphNode "TFRobot"
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </Graph/ROS_Odometry/Context.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_Odometry/OnPlaybackTick.outputs:tick>
            custom string inputs:nodeNamespace = ""
            custom rel inputs:parentPrim = </World/full_warehouse> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom bool inputs:staticPublisher
            custom rel inputs:targetPrims = </World/carter_v1/chassis_link> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </Graph/ROS_Odometry/ReadSimTime.outputs:simulationTime>
            custom string inputs:topicName = "/tf"
            token node:type = "isaacsim.ros2.bridge.ROS2PublishTransformTree"
            int node:typeVersion = 1
        }
    }

    def OmniGraph "differential_controller"
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 9)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "OnPlaybackTick"
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 2
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
        }

        def OmniGraphNode "DifferentialController" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom double inputs:angularVelocity
            prepend double inputs:angularVelocity.connect = </Graph/differential_controller/break_3_vector_01.outputs:z>
            custom double inputs:dt
            prepend double inputs:dt.connect = </Graph/differential_controller/OnPlaybackTick.outputs:deltaSeconds>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/differential_controller/ros2_subscribe_twist.outputs:execOut>
            custom double inputs:linearVelocity
            prepend double inputs:linearVelocity.connect = </Graph/differential_controller/break_3_vector.outputs:x>
            custom double inputs:maxAcceleration
            custom double inputs:maxAngularAcceleration
            custom double inputs:maxAngularSpeed = 0.2
            custom double inputs:maxDeceleration
            custom double inputs:maxLinearSpeed = 0
            custom double inputs:maxWheelSpeed = 0
            custom double inputs:wheelDistance = 0.012500000186264515
            custom double inputs:wheelRadius = 0.029999999329447746
            token node:type = "isaacsim.robot.wheeled_robots.DifferentialController"
            int node:typeVersion = 1
            custom double[] outputs:velocityCommand
            uniform token ui:nodegraph:node:expansionState = "minimized"
            uniform float2 ui:nodegraph:node:pos = (239.09924, 284.39133)
        }

        def OmniGraphNode "ArticulationController" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom double[] inputs:effortCommand
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/differential_controller/OnPlaybackTick.outputs:tick>
            custom int[] inputs:jointIndices
            custom token[] inputs:jointNames = ["right_wheel", "left_wheel"]
            custom double[] inputs:positionCommand
            custom string inputs:robotPath = ""
            custom rel inputs:targetPrim = </World/carter_v1> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom double[] inputs:velocityCommand
            prepend double[] inputs:velocityCommand.connect = </Graph/differential_controller/DifferentialController.outputs:velocityCommand>
            token node:type = "isaacsim.core.nodes.IsaacArticulationController"
            int node:typeVersion = 1
            uniform float2 ui:nodegraph:node:pos = (676.69806, 45.161507)
        }

        def OmniGraphNode "ros2_subscribe_twist" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/differential_controller/OnPlaybackTick.outputs:tick>
            custom string inputs:nodeNamespace
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom string inputs:topicName
            token node:type = "isaacsim.ros2.bridge.ROS2SubscribeTwist"
            int node:typeVersion = 1
            custom vector3d outputs:angularVelocity
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom vector3d outputs:linearVelocity
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-802.5392, 273.9766)
        }

        def OmniGraphNode "scale_to_from_stage_units" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:conversion (
                allowedTokens = ["Convert to stage units", "Convert to meters"]
            )
            custom token inputs:value
            prepend token inputs:value.connect = </Graph/differential_controller/ros2_subscribe_twist.outputs:linearVelocity>
            token node:type = "isaacsim.core.nodes.OgnIsaacScaleToFromStageUnit"
            int node:typeVersion = 1
            custom token outputs:result
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-387.88907, 614.95483)
        }

        def OmniGraphNode "break_3_vector" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:tuple
            prepend token inputs:tuple.connect = </Graph/differential_controller/scale_to_from_stage_units.outputs:result>
            token node:type = "omni.graph.nodes.BreakVector3"
            int node:typeVersion = 1
            custom token outputs:x
            custom token outputs:y
            custom token outputs:z
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-16.596048, 613.9331)
        }

        def OmniGraphNode "break_3_vector_01" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:tuple
            prepend token inputs:tuple.connect = </Graph/differential_controller/ros2_subscribe_twist.outputs:angularVelocity>
            token node:type = "omni.graph.nodes.BreakVector3"
            int node:typeVersion = 1
            custom token outputs:x
            custom token outputs:y
            custom token outputs:z
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-361.14243, 423.12686)
        }

        def OmniGraphNode "print_text" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/differential_controller/OnPlaybackTick_01.outputs:tick>
            custom token inputs:logLevel (
                allowedTokens = ["Info", "Warning", "Error"]
            )
            custom string inputs:text
            prepend string inputs:text.connect = </Graph/differential_controller/to_string.outputs:converted>
            custom bool inputs:toScreen = 1
            custom token inputs:viewport
            token node:type = "omni.graph.ui_nodes.PrintText"
            int node:typeVersion = 1
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (894.2889, 409.96454)
        }

        def OmniGraphNode "to_string" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:value
            prepend token inputs:value.connect = </Graph/differential_controller/DifferentialController.outputs:velocityCommand>
            token node:type = "omni.graph.nodes.ToString"
            int node:typeVersion = 1
            custom string outputs:converted
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (570.22894, 446.97693)
        }

        def OmniGraphNode "OnPlaybackTick_01" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 2
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
            uniform float2 ui:nodegraph:node:pos = (552.62506, 576.0002)
        }
    }
}

over "SM_RackShelf_3827"
{
}

over "SM_RackShelf_3828"
{
}

