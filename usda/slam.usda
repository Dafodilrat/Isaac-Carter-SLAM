#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (-11.284225405036233, -2.6828334931627724, 3.749668122597339)
                double3 target = (-2.3069456373524417, 14.371704079027872, -14.139381752790083)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./slam.usda"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
        }
    }
    defaultPrim = "World"
    endTimeCode = 1000000
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)

def Xform "World"
{
    def Xform "carter_v1_physx_lidar" (
        prepend references = @https://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.5/Isaac/Robots/Carter/carter_v1_physx_lidar.usd@
    )
    {
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-10.215325241786935, 0, 0.23736493251303814)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "chassis_link"
        {
            custom string isaac:nameOverride = "carter" (
                displayName = "Name Override"
                doc = "Name override for prim lookup in base name search"
            )

            over "carter_lidar" (
                active = false
            )
            {
                float3 xformOp:rotateZYX = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.05999999865889549, 0, 0.3799999915063381)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]

                def Camera "Rotating" (
                    prepend apiSchemas = ["IsaacRtxLidarSensorAPI"]
                )
                {
                    token cameraSensorType = "lidar" (
                        allowedTokens = ["camera", "radar", "lidar"]
                    )
                    string sensorModelConfig = "Example_Rotary"
                    string sensorModelPluginName = "omni.sensors.nv.lidar.lidar_core.plugin"
                    token visibility = "invisible"
                    quatd xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }
        }

        def Xform "Velodyne_VLS_128" (
            prepend references = @https://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.5/Isaac/Sensors/Velodyne/vls-128/vls_128.usd@
        )
        {
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.6857264687407238, 0.6400000000007812, 0.6400000000007812)
            double3 xformOp:translate = (-0.055884864287876646, 0, 0.3738491502039878)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/carter_v1_physx_lidar>
                rel physics:body1 = </World/carter_v1_physx_lidar/chassis_link>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (-0.055884864, 0, 0.37384915)
                point3f physics:localPos1 = (-0.05821891, -8.7140785e-7, 0.36974937)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (0.99999803, 6.509944e-7, -0.0019834065, -0.0000010622937)
            }
        }

        over "left_wheel_link"
        {
        }

        over "right_wheel_link"
        {
        }

        over "rear_pivot_link"
        {
        }

        over "rear_wheel_link"
        {
        }

        over "com_offset"
        {
        }

        over "imu"
        {
        }
    }

    def Xform "full_warehouse" (
        prepend references = @https://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.5/Isaac/Environments/Simple_Warehouse/full_warehouse.usd@
    )
    {
    }
}

def Xform "Environment"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float inputs:angle = 1
        float inputs:intensity = 3000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        quatd xformOp:orient = (0.6532814824381883, 0.2705980500730985, 0.27059805007309845, 0.6532814824381882)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

over "Render" (
    hide_in_stage_window = true
)
{
}

def "Graph"
{
    def OmniGraph "ROS_LidarRTX"
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 9)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "OnPlaybackTick"
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 2
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
        }

        def OmniGraphNode "RunOnce"
        {
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_LidarRTX/OnPlaybackTick.outputs:tick>
            token node:type = "isaacsim.core.nodes.OgnIsaacRunOneSimulationFrame"
            int node:typeVersion = 1
            custom uint outputs:step (
                customData = {
                    bool isExecution = 1
                }
            )
        }

        def OmniGraphNode "RenderProduct"
        {
            custom rel inputs:cameraPrim = </World/carter_v1_physx_lidar/Velodyne_VLS_128/Velodyne_VLS_128> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom bool inputs:enabled
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_LidarRTX/RunOnce.outputs:step>
            custom uint inputs:height
            custom uint inputs:width
            token node:type = "isaacsim.core.nodes.IsaacCreateRenderProduct"
            int node:typeVersion = 2
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom token outputs:renderProductPath
        }

        def OmniGraphNode "Context"
        {
            custom uchar inputs:domain_id
            custom bool inputs:useDomainIDEnvVar
            token node:type = "isaacsim.ros2.bridge.ROS2Context"
            int node:typeVersion = 2
            custom uint64 outputs:context
        }

        def OmniGraphNode "LaserScanPublish"
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </Graph/ROS_LidarRTX/Context.outputs:context>
            custom bool inputs:enabled
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_LidarRTX/RenderProduct.outputs:execOut>
            custom string inputs:frameId = "chasis_link"
            custom uint inputs:frameSkipCount
            custom bool inputs:fullScan = 0
            custom string inputs:nodeNamespace = "/carter"
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom token inputs:renderProductPath
            prepend token inputs:renderProductPath.connect = </Graph/ROS_LidarRTX/RenderProduct.outputs:renderProductPath>
            custom bool inputs:resetSimulationTimeOnStop
            custom bool inputs:showDebugView
            custom string inputs:topicName = "/laser_scan"
            custom token inputs:type = "laser_scan" (
                allowedTokens = ["laser_scan", "point_cloud"]
            )
            custom bool inputs:useSystemTime
            token node:type = "isaacsim.ros2.bridge.ROS2RtxLidarHelper"
            int node:typeVersion = 1
        }
    }

    def OmniGraph "ROS_TF" (
        active = false
    )
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 9)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "OnPlaybackTick"
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 2
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
        }

        def OmniGraphNode "Context"
        {
            custom uchar inputs:domain_id
            custom bool inputs:useDomainIDEnvVar
            token node:type = "isaacsim.ros2.bridge.ROS2Context"
            int node:typeVersion = 2
            custom uint64 outputs:context
        }

        def OmniGraphNode "ReadSimTime"
        {
            custom bool inputs:resetOnStop = 0
            custom int64 inputs:swhFrameNumber
            token node:type = "isaacsim.core.nodes.IsaacReadSimulationTime"
            int node:typeVersion = 1
            custom double outputs:simulationTime
        }

        def OmniGraphNode "PublisherTF"
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </Graph/ROS_TF/Context.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_TF/OnPlaybackTick.outputs:tick>
            custom string inputs:nodeNamespace = "/carter"
            custom rel inputs:parentPrim = </World/full_warehouse> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom bool inputs:staticPublisher
            custom rel inputs:targetPrims = </World/carter_v1_physx_lidar> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </Graph/ROS_TF/ReadSimTime.outputs:simulationTime>
            custom string inputs:topicName = "/tf"
            token node:type = "isaacsim.ros2.bridge.ROS2PublishTransformTree"
            int node:typeVersion = 1
        }
    }

    def OmniGraph "ROS_Odometry"
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 9)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "OnPlaybackTick"
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 2
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
        }

        def OmniGraphNode "Context"
        {
            custom uchar inputs:domain_id
            custom bool inputs:useDomainIDEnvVar
            token node:type = "isaacsim.ros2.bridge.ROS2Context"
            int node:typeVersion = 2
            custom uint64 outputs:context
        }

        def OmniGraphNode "ReadSimTime"
        {
            custom bool inputs:resetOnStop = 0
            custom int64 inputs:swhFrameNumber
            token node:type = "isaacsim.core.nodes.IsaacReadSimulationTime"
            int node:typeVersion = 1
            custom double outputs:simulationTime
        }

        def OmniGraphNode "TFWorld2Odom"
        {
            custom string inputs:childFrameId = "odom"
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </Graph/ROS_Odometry/Context.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_Odometry/OnPlaybackTick.outputs:tick>
            custom string inputs:nodeNamespace = ""
            custom string inputs:parentFrameId = "world"
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom quatd inputs:rotation
            custom bool inputs:staticPublisher
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </Graph/ROS_Odometry/ReadSimTime.outputs:simulationTime>
            custom string inputs:topicName
            custom vector3d inputs:translation
            token node:type = "isaacsim.ros2.bridge.ROS2PublishRawTransformTree"
            int node:typeVersion = 1
        }

        def OmniGraphNode "TFOdom2Robot"
        {
            custom string inputs:childFrameId = "chasis_link"
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </Graph/ROS_Odometry/Context.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_Odometry/OnPlaybackTick.outputs:tick>
            custom string inputs:nodeNamespace = ""
            custom string inputs:parentFrameId
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom quatd inputs:rotation
            prepend quatd inputs:rotation.connect = </Graph/ROS_Odometry/ComputeOdometry.outputs:orientation>
            custom bool inputs:staticPublisher
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </Graph/ROS_Odometry/ReadSimTime.outputs:simulationTime>
            custom string inputs:topicName
            custom vector3d inputs:translation
            prepend vector3d inputs:translation.connect = </Graph/ROS_Odometry/ComputeOdometry.outputs:position>
            token node:type = "isaacsim.ros2.bridge.ROS2PublishRawTransformTree"
            int node:typeVersion = 1
        }

        def OmniGraphNode "ComputeOdometry"
        {
            custom rel inputs:chassisPrim = </World/carter_v1_physx_lidar/chassis_link> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_Odometry/OnPlaybackTick.outputs:tick>
            token node:type = "isaacsim.core.nodes.IsaacComputeOdometry"
            int node:typeVersion = 1
            custom vector3d outputs:angularAcceleration
            custom vector3d outputs:angularVelocity
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom vector3d outputs:linearAcceleration
            custom vector3d outputs:linearVelocity
            custom quatd outputs:orientation
            custom vector3d outputs:position
        }

        def OmniGraphNode "PublisherOdometry"
        {
            custom vector3d inputs:angularVelocity
            prepend vector3d inputs:angularVelocity.connect = </Graph/ROS_Odometry/ComputeOdometry.outputs:angularVelocity>
            custom string inputs:chassisFrameId = "chassis_link"
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </Graph/ROS_Odometry/Context.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_Odometry/ComputeOdometry.outputs:execOut>
            custom vector3d inputs:linearVelocity
            prepend vector3d inputs:linearVelocity.connect = </Graph/ROS_Odometry/ComputeOdometry.outputs:linearVelocity>
            custom string inputs:nodeNamespace = ""
            custom string inputs:odomFrameId
            custom quatd inputs:orientation
            prepend quatd inputs:orientation.connect = </Graph/ROS_Odometry/ComputeOdometry.outputs:orientation>
            custom vector3d inputs:position
            prepend vector3d inputs:position.connect = </Graph/ROS_Odometry/ComputeOdometry.outputs:position>
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom vector3d inputs:robotFront
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </Graph/ROS_Odometry/ReadSimTime.outputs:simulationTime>
            custom string inputs:topicName = "/odom"
            token node:type = "isaacsim.ros2.bridge.ROS2PublishOdometry"
            int node:typeVersion = 1
        }

        def OmniGraphNode "TFRobot"
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </Graph/ROS_Odometry/Context.outputs:context>
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </Graph/ROS_Odometry/OnPlaybackTick.outputs:tick>
            custom string inputs:nodeNamespace = ""
            custom rel inputs:parentPrim = </World/full_warehouse> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom bool inputs:staticPublisher
            custom rel inputs:targetPrims = </World/carter_v1_physx_lidar/chassis_link> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </Graph/ROS_Odometry/ReadSimTime.outputs:simulationTime>
            custom string inputs:topicName = "/tf"
            token node:type = "isaacsim.ros2.bridge.ROS2PublishTransformTree"
            int node:typeVersion = 1
        }
    }
}

over "SM_RackShelf_3827"
{
}

over "SM_RackShelf_3828"
{
}

